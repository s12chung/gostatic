// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/s12chung/gostatic/go/cli (interfaces: App)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	logrus "github.com/sirupsen/logrus"
	reflect "reflect"
)

// MockApp is a mock of App interface
type MockApp struct {
	ctrl     *gomock.Controller
	recorder *MockAppMockRecorder
}

// MockAppMockRecorder is the mock recorder for MockApp
type MockAppMockRecorder struct {
	mock *MockApp
}

// NewMockApp creates a new mock instance
func NewMockApp(ctrl *gomock.Controller) *MockApp {
	mock := &MockApp{ctrl: ctrl}
	mock.recorder = &MockAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockApp) EXPECT() *MockAppMockRecorder {
	return m.recorder
}

// Around mocks base method
func (m *MockApp) Around(arg0 func(func() error) error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Around", arg0)
}

// Around indicates an expected call of Around
func (mr *MockAppMockRecorder) Around(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Around", reflect.TypeOf((*MockApp)(nil).Around), arg0)
}

// FileServerPort mocks base method
func (m *MockApp) FileServerPort() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileServerPort")
	ret0, _ := ret[0].(int)
	return ret0
}

// FileServerPort indicates an expected call of FileServerPort
func (mr *MockAppMockRecorder) FileServerPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileServerPort", reflect.TypeOf((*MockApp)(nil).FileServerPort))
}

// Generate mocks base method
func (m *MockApp) Generate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Generate indicates an expected call of Generate
func (mr *MockAppMockRecorder) Generate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockApp)(nil).Generate))
}

// GeneratedPath mocks base method
func (m *MockApp) GeneratedPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratedPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GeneratedPath indicates an expected call of GeneratedPath
func (mr *MockAppMockRecorder) GeneratedPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratedPath", reflect.TypeOf((*MockApp)(nil).GeneratedPath))
}

// Host mocks base method
func (m *MockApp) Host() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Host")
	ret0, _ := ret[0].(error)
	return ret0
}

// Host indicates an expected call of Host
func (mr *MockAppMockRecorder) Host() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Host", reflect.TypeOf((*MockApp)(nil).Host))
}

// Log mocks base method
func (m *MockApp) Log() logrus.FieldLogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Log")
	ret0, _ := ret[0].(logrus.FieldLogger)
	return ret0
}

// Log indicates an expected call of Log
func (mr *MockAppMockRecorder) Log() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockApp)(nil).Log))
}

// RunFileServer mocks base method
func (m *MockApp) RunFileServer() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunFileServer")
	ret0, _ := ret[0].(error)
	return ret0
}

// RunFileServer indicates an expected call of RunFileServer
func (mr *MockAppMockRecorder) RunFileServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunFileServer", reflect.TypeOf((*MockApp)(nil).RunFileServer))
}

// ServerPort mocks base method
func (m *MockApp) ServerPort() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerPort")
	ret0, _ := ret[0].(int)
	return ret0
}

// ServerPort indicates an expected call of ServerPort
func (mr *MockAppMockRecorder) ServerPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerPort", reflect.TypeOf((*MockApp)(nil).ServerPort))
}

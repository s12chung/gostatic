// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/s12chung/gostatic/go/lib/router (interfaces: Router)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	router "github.com/s12chung/gostatic/go/lib/router"
	reflect "reflect"
)

// MockRouter is a mock of Router interface
type MockRouter struct {
	ctrl     *gomock.Controller
	recorder *MockRouterMockRecorder
}

// MockRouterMockRecorder is the mock recorder for MockRouter
type MockRouterMockRecorder struct {
	mock *MockRouter
}

// NewMockRouter creates a new mock instance
func NewMockRouter(ctrl *gomock.Controller) *MockRouter {
	mock := &MockRouter{ctrl: ctrl}
	mock.recorder = &MockRouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRouter) EXPECT() *MockRouterMockRecorder {
	return m.recorder
}

// Around mocks base method
func (m *MockRouter) Around(arg0 router.AroundHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Around", arg0)
}

// Around indicates an expected call of Around
func (mr *MockRouterMockRecorder) Around(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Around", reflect.TypeOf((*MockRouter)(nil).Around), arg0)
}

// Get mocks base method
func (m *MockRouter) Get(arg0 string, arg1 router.ContextHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Get", arg0, arg1)
}

// Get indicates an expected call of Get
func (mr *MockRouterMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRouter)(nil).Get), arg0, arg1)
}

// GetHTML mocks base method
func (m *MockRouter) GetHTML(arg0 string, arg1 router.ContextHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetHTML", arg0, arg1)
}

// GetHTML indicates an expected call of GetHTML
func (mr *MockRouterMockRecorder) GetHTML(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHTML", reflect.TypeOf((*MockRouter)(nil).GetHTML), arg0, arg1)
}

// GetRootHTML mocks base method
func (m *MockRouter) GetRootHTML(arg0 router.ContextHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetRootHTML", arg0)
}

// GetRootHTML indicates an expected call of GetRootHTML
func (mr *MockRouterMockRecorder) GetRootHTML(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRootHTML", reflect.TypeOf((*MockRouter)(nil).GetRootHTML), arg0)
}

// Requester mocks base method
func (m *MockRouter) Requester() router.Requester {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Requester")
	ret0, _ := ret[0].(router.Requester)
	return ret0
}

// Requester indicates an expected call of Requester
func (mr *MockRouterMockRecorder) Requester() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Requester", reflect.TypeOf((*MockRouter)(nil).Requester))
}

// URLs mocks base method
func (m *MockRouter) URLs() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URLs")
	ret0, _ := ret[0].([]string)
	return ret0
}

// URLs indicates an expected call of URLs
func (mr *MockRouterMockRecorder) URLs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URLs", reflect.TypeOf((*MockRouter)(nil).URLs))
}
